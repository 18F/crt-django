# Python CircleCI 2.0 configuration file
# Circle docs https://circleci.com/docs/2.0/language-python/
version: 2 # use CircleCI 2.0
jobs: # A basic unit of work in a run
  build: # runs not using Workflows must have a `build` job as entry point
    # directory where steps are run
    working_directory: ~/code
    docker: # run the steps with Docker
      # CircleCI Python images available at: https://hub.docker.com/r/circleci/python/
      - image: python:3.7
        environment: # environment variables for primary container
          PIPENV_VENV_IN_PROJECT: true
          DATABASE_URL: postgresql://root@localhost/circle_test?sslmode=disable
      # CircleCI PostgreSQL images available at: https://hub.docker.com/r/circleci/postgres/
      - image: postgres:10.1-alpine
        environment: # environment variables for the Postgres container.
          POSTGRES_USER: root
          POSTGRES_DB: circle_test
    steps: # steps that comprise the `build` job
      - checkout # check out source code to working directory
      - restore_cache:
      # Read about caching dependencies: https://circleci.com/docs/2.0/caching/
          key: deps9-{{ .Branch }}-{{ checksum "Pipfile.lock" }}
      - run:
          # Add Node install to python container
          command: |
            echo "deb https://deb.nodesource.com/node_10.x stretch main" > /etc/apt/sources.list.d/nodesource.list && \
            wget -qO- https://deb.nodesource.com/gpgkey/nodesource.gpg.key | apt-key add - && \
            echo "deb https://dl.yarnpkg.com/debian/ stable main" > /etc/apt/sources.list.d/yarn.list && \
            wget -qO- https://dl.yarnpkg.com/debian/pubkey.gpg | apt-key add - && \
            apt-get update && \
            apt-get install -yqq nodejs yarn && \
            npm i -g npm@^6 && \
            rm -rf /var/lib/apt/lists/*
            npm install
      - run:
          # Python install with pipenv then migrate the database
          command: |
            pip install -U pip && pip install pipenv && \
            pip install pipenv
            pipenv install
            pipenv run crt_portal/manage.py migrate
      - save_cache: # cache Python and Node dependencies using checksum of Pipfile and package.json as the cache-key
          key: deps9-{{ .Branch }}-{{ checksum "Pipfile.lock" }}-{{ checksum "package.json" }}
          paths:
            - ".venv"
            - "/usr/local/bin"
            - "/usr/local/lib/python3.7/site-packages"
      - run:
          command: |
            mkdir /tmp/test-results;
            mkdir /tmp/test-artifacts;
      - run:
          # Run unit tests, (run bandit tests when ready)
          command: |
            pipenv run crt_portal/manage.py test cts_forms
      - store_test_results: # Upload test results for display in Test Summary: https://circleci.com/docs/2.0/collect-test-data/
          path: /tmp/test-results
workflows:
  version: 2
  build-test-deploy:
    jobs:
      - build
