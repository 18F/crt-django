# Python CircleCI 2.0 configuration file
# Circle docs https://circleci.com/docs/2.0/language-python/
version: 2
jobs:
  build_and_test: # runs not using Workflows must have a `build` job as entry point
    # directory where steps are run
    working_directory: ~/code
    docker:
      # CircleCI Python images available at: https://hub.docker.com/r/circleci/python/
      - image: circleci/python:3.7-node-browsers
        environment: # environment variables for primary container
          PIPENV_VENV_IN_PROJECT: True
          DATABASE_URL: postgresql://root@localhost/circle_test?sslmode=disable
          NODE_ENV: development # Only needed if puppeteer is in `devDependencies`
      # CircleCI PostgreSQL images available at: https://hub.docker.com/r/circleci/postgres/
      - image: postgres:10.1-alpine
        environment:
          POSTGRES_USER: root
          POSTGRES_DB: circle_test
    steps:
      - checkout
      - restore_cache:
      # Read about caching dependencies: https://circleci.com/docs/2.0/caching/
          key: deps9-{{ .Branch }}-{{ checksum "Pipfile.lock" }}-{{ checksum "package.json" }}-
      - run:
          name: Node install
          command: |
            npm install
      - run:
          name: Python install with pipenv then migrate the database
          command: |
            pip install -U pip && pip install pipenv && \
            pip install pipenv
            pipenv install
            pipenv run crt_portal/manage.py migrate
      - save_cache: # cache Python and Node dependencies using checksum of Pipfile and package.json as the cache-key
          key: deps9-{{ .Branch }}-{{ checksum "Pipfile.lock" }}-{{ checksum "package.json" }}
          paths:
            - ".venv"
            - "/usr/local/bin"
            - "/usr/local/lib/python3.7/site-packages"
      - run:
          name: run server for tests
          command: |
            export CIRCLECI=True
            pipenv run crt_portal/manage.py runserver 8000
          background: True
      - run:
          name: Make directory for test results
          command: |
            mkdir /tmp/test-results;
      #  these are working
      # - run:
      #     name: Run unit tests
      #     command: |
      #       pipenv run crt_portal/manage.py test cts_forms
      # - run:
      #     name: Run bandit (Python security) tests
      #     command: |
      #       pipenv run bandit -r crt_portal/
      # - run:
      #     name: Run flake8 test for Python code style
      #     command: |
      #       pipenv run flake8
      - run:
          name: Run pa11y-ci accessibility check
          command: |
            sleep 20
            curl --retry-delay 5 --retry 10  --retry-connrefused http://127.0.0.1:8000
            npm run test:a11y-ci

      - store_test_results: # Upload test results for display in Test Summary: https://circleci.com/docs/2.0/collect-test-data/
          path: /tmp/test-results

  deploy-dev:
    working_directory: ~/code
    docker:
      # CircleCI Python images available at: https://hub.docker.com/r/circleci/python/
      - image: circleci/python:3.7-node-browsers
        environment: # environment variables for primary container
          PIPENV_VENV_IN_PROJECT: True
          DATABASE_URL: postgresql://root@localhost/circle_test?sslmode=disable
      # CircleCI PostgreSQL images available at: https://hub.docker.com/r/circleci/postgres/
      - image: postgres:10.1-alpine
        environment:
          POSTGRES_USER: root
          POSTGRES_DB: circle_test
    steps:
      - checkout
      - restore_cache:
          # this should all be cached from the test
          key: deps9-{{ .Branch }}-{{ checksum "Pipfile.lock" }}-{{ checksum "package.json" }}
      - run:
          name: Node install
          command: |
            npm install
      - run:
          # database will be migrated in cloud.gov
          name: Python install with pipenv
          command: |
            pip install -U pip && pip install pipenv && \
            pip install pipenv
            pipenv install
      - run:
          name: Install cloud foundry deploy tools
          command: |
            wget -q -O - https://packages.cloudfoundry.org/debian/cli.cloudfoundry.org.key | apt-key add -
            echo "deb https://packages.cloudfoundry.org/debian stable main" | tee /etc/apt/sources.list.d/cloudfoundry-cli.list
            apt-get update
            apt-get install cf-cli
      - run:
          name: Deploy to dev
          command: |
              ./blue-green-deploy.sh $USERNAME_DEV $CF_PASSWORD_DEV dev

  deploy-stage:
    working_directory: ~/code
    docker:
      # CircleCI Python images available at: https://hub.docker.com/r/circleci/python/
      - image: circleci/python:3.7-node-browsers
        environment: # environment variables for primary container
          PIPENV_VENV_IN_PROJECT: True
          DATABASE_URL: postgresql://root@localhost/circle_test?sslmode=disable
      # CircleCI PostgreSQL images available at: https://hub.docker.com/r/circleci/postgres/
      - image: postgres:10.1-alpine
        environment:
          POSTGRES_USER: root
          POSTGRES_DB: circle_test
    steps:
      - checkout
      - restore_cache:
          # this should all be cached from the test
          key: deps9-{{ .Branch }}-{{ checksum "Pipfile.lock" }}-{{ checksum "package.json" }}
      - run:
          name: Node install
          command: |
            npm install
      - run:
          # database will be migrated in cloud.gov
          name: Python install with pipenv
          command: |
            pip install -U pip && pip install pipenv && \
            pip install pipenv
            pipenv install
      - run:
          name: Install cloud foundry deploy tools
          command: |
            wget -q -O - https://packages.cloudfoundry.org/debian/cli.cloudfoundry.org.key | apt-key add -
            echo "deb https://packages.cloudfoundry.org/debian stable main" | tee /etc/apt/sources.list.d/cloudfoundry-cli.list
            apt-get update
            apt-get install cf-cli
      - run:
          name: Deploy to stage
          command: |
            ./blue-green-deploy.sh $USERNAME_STAGE $CF_PASSWORD_STAGE stage

  deploy-prod:
    working_directory: ~/code
    docker:
      # CircleCI Python images available at: https://hub.docker.com/r/circleci/python/
      - image: circleci/python:3.7-node-browsers
        environment: # environment variables for primary container
          PIPENV_VENV_IN_PROJECT: True
          DATABASE_URL: postgresql://root@localhost/circle_test?sslmode=disable
      # CircleCI PostgreSQL images available at: https://hub.docker.com/r/circleci/postgres/
      - image: postgres:10.1-alpine
        environment:
          POSTGRES_USER: root
          POSTGRES_DB: circle_test
    steps:
      - checkout
      - restore_cache:
          # this should all be cached from the test
          key: deps9-{{ .Branch }}-{{ checksum "Pipfile.lock" }}-{{ checksum "package.json" }}
      - run:
          name: Node install
          command: |
            npm install
      - run:
          # database will be migrated in cloud.gov
          name: Python install with pipenv
          command: |
            pip install -U pip && pip install pipenv && \
            pip install pipenv
            pipenv install
      - run:
          name: Install cloud foundry deploy tools
          command: |
            wget -q -O - https://packages.cloudfoundry.org/debian/cli.cloudfoundry.org.key | apt-key add -
            echo "deb https://packages.cloudfoundry.org/debian stable main" | tee /etc/apt/sources.list.d/cloudfoundry-cli.list
            apt-get update
            apt-get install cf-cli
      - run:
          name: Deploy to production
          command: |
            ./blue-green-deploy.sh $USERNAME_PROD $CF_PASSWORD_PROD prod

workflows:
  version: 2
  build-test-deploy:
    jobs:
      - build_and_test

      - deploy-dev:
          requires:
            - build_and_test
          filters:
            branches:
              only: develop

      - deploy-stage:
          requires:
            - build_and_test
          filters:
            branches:
              only: release/*

      - deploy-prod:
          requires:
            - build_and_test
          filters:
            branches:
              only: master
